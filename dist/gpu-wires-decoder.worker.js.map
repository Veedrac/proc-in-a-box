{"version":3,"file":"gpu-wires-decoder.worker.js","sources":["../src/backends/gpu-wires-decoder.worker.js"],"sourcesContent":["onmessage = function(event) {\n    let [data, width, height, numWires] = event.data;\n    // Loops aside, trace *only* from ends.\n    // No stack is needed for this, since it's always a\n    // single one-way traversal.\n    //\n    // When doing so,\n    //\n    //   * OR all the signals together and\n    //     push to the wire states array.\n    //\n    //   * Record all input T-junctions to the line,\n    //     and push each pair to the transition map.\n    //\n    //   * Map the values in the pixels to the\n    //     wire states array location.\n    //\n    // Finally, check for unhandled pixels, aka. loops.\n    //\n    // Afterwards, use the mapping to remap the\n    // transition map to the correct location in the\n    // wire states array, and turn it into an indexed\n    // mapping.\n\n    const size = width * height;\n    numWires = (numWires + 1024) & ~1023;\n\n    // Is each wire on or off?\n    // The preallocated length is massively pessimistic.\n    // An extra state is reserved at the beginning to dump state into.\n    let wireStatesN = 1;\n    let wireStates = new Uint8Array(numWires);\n\n    // TODO\n    let incomingWiresN = 0;\n    let incomingWires = new Uint32Array(numWires * 2);\n    let incomingWireGroupsOff = new Uint32Array(numWires >> 3);\n    let incomingWireGroupsLen = new Uint8Array(numWires);\n\n    // Which wire does each pixel get its value from?\n    const imageDecoder = new Uint32Array(size);\n\n    // Extra information for wire crossings.\n    // This only stores horizontal wires, because they can change\n    // at most once every four wires.\n    const imageDecoderExtra = new Uint32Array(Math.ceil(size >> 2));\n\n    const traverseFrom = function(data, width, i, j) {\n        const idx = (i + 1) + (j + 1) * (width + 2);\n        const kind  = data[idx];\n        const up    = data[idx - (width + 2)] & 1;\n        const down  = data[idx + (width + 2)] & 1;\n        const left  = data[idx - 1] & 1;\n        const right = data[idx + 1] & 1;\n        const numSiblings = up + down + left + right;\n\n        if (numSiblings === 2 || numSiblings === 4) {\n            // Only start traversals from ends.\n            return;\n        }\n\n        // End #1\n        let wireActive = (kind >> 1) & (numSiblings != 3 ? 1 : 0);\n        imageDecoder[i + j * width] = wireStatesN;\n        if ((wireStatesN & 7) == 0) {\n            incomingWireGroupsOff[wireStatesN >> 3] = incomingWiresN;\n        }\n\n        let [m, n] = [i, j];\n        let [dm, dn] = [0, 0];\n\n        if (numSiblings === 0) {\n            wireStates[wireStatesN] = wireActive;\n            wireStatesN++;\n            return;\n        } else if (numSiblings === 1) {\n            // Go towards the filled pixel\n            if      (up)    { dn = -1; }\n            else if (down)  { dn = +1; }\n            else if (left)  { dm = -1; }\n            else if (right) { dm = +1; }\n            else            { throw 1; }\n        } else {\n            // Go away from the empty pixel\n            if      (!up)    { dn = +1; }\n            else if (!down)  { dn = -1; }\n            else if (!left)  { dm = +1; }\n            else if (!right) { dm = -1; }\n            else             { throw 2; }\n        }\n\n        while (true) {\n            [m, n] = [m + dm, n + dn];\n            const mnIdx = m + n * width;\n\n            const straight = data[(m + dm + 1) + (n + dn + 1) * (width + 2)] & 1;\n            const left     = data[(m - dn + 1) + (n + dm + 1) * (width + 2)] & 1;\n            const right    = data[(m + dn + 1) + (n - dm + 1) * (width + 2)] & 1;\n\n            if (straight) {\n                // The line continues\n                if (left && right) {\n                    // Don't cross the streams!\n                    if (dm != 0) {\n                        imageDecoderExtra[mnIdx >> 2] = wireStatesN;\n                    } else {\n                        imageDecoder[mnIdx] = 0x80000000 | wireStatesN;\n                    }\n                } else if (left) {\n                    incomingWires[incomingWiresN] = mnIdx;\n                    incomingWiresN++;\n                    incomingWireGroupsLen[wireStatesN]++;\n                } else if (right) {\n                    incomingWires[incomingWiresN] = mnIdx;\n                    incomingWiresN++;\n                    incomingWireGroupsLen[wireStatesN]++;\n                } else {\n                    wireActive |= data[(m + 1) + (n + 1) * (width + 2)] >> 1;\n                    imageDecoder[mnIdx] = wireStatesN;\n                }\n            } else if (left === right) {\n                // End here\n                wireActive |= (data[(m + 1) + (n + 1) * (width + 2)] >> 1) & (left ? 0 : 1);\n                imageDecoder[mnIdx] = wireStatesN\n                wireStates[wireStatesN] = wireActive;\n                wireStatesN++;\n                return;\n            } else {\n                wireActive |= data[(m + 1) + (n + 1) * (width + 2)] >> 1;\n                imageDecoder[mnIdx] = wireStatesN\n                if (left) {\n                    [dm, dn] = [-dn, +dm];\n                } else {\n                    [dm, dn] = [+dn, -dm];\n                }\n            }\n        }\n    }\n\n    for (let j = 0; j < height; j++) {\n        for (let i = 0; i < width; i++) {\n            if (!data[(i + 1) + (j + 1) * (width + 2)]) {\n                continue;\n            }\n            if (imageDecoder[i + j * width] != 0) {\n                continue;\n            }\n\n            traverseFrom(data, width, i, j);\n        }\n\n        postMessage([\"frame\", j]);\n    }\n\n    const traverseLoopsFrom = function(data, width, i, j) {\n        const idx = (i + 1) + (j + 1) * (width + 2);\n        const kind  = data[idx];\n        const up    = data[idx - (width + 2)] & 1;\n        const down  = data[idx + (width + 2)] & 1;\n        const left  = data[idx - 1] & 1;\n        const right = data[idx + 1] & 1;\n        const numSiblings = up + down + left + right;\n\n        if (numSiblings !== 2) {\n            // Only loops should be missing!\n            throw 3;\n        }\n\n        // Loop \"start\"; stop when reached again.\n        let wireActive = kind >> 1;\n        imageDecoder[i + j * width] = wireStatesN;\n        if ((wireStatesN & 7) == 0) {\n            incomingWireGroupsOff[wireStatesN >> 3] = incomingWiresN;\n        }\n\n        let [m, n] = [i, j];\n        let [dm, dn] = [0, 0];\n\n        // Any side will do right now.\n        if      (up)   { dn = -1; }\n        else if (down) { dn = +1; }\n        else           { dm = -1; }\n\n        while (true) {\n            [m, n] = [m + dm, n + dn];\n            const mnIdx = m + n * width;\n\n            if (m == i && n == j) {\n                // Back to the future.\n                wireStates[wireStatesN] = wireActive;\n                wireStatesN++;\n                return;\n            }\n\n            const straight = data[(m + dm + 1) + (n + dn + 1) * (width + 2)] & 1;\n            const left     = data[(m - dn + 1) + (n + dm + 1) * (width + 2)] & 1;\n            const right    = data[(m + dn + 1) + (n - dm + 1) * (width + 2)] & 1;\n\n            if (straight) {\n                // The line continues\n                if (left && right) {\n                    // Don't cross the streams!\n                    imageDecoderExtra[mnIdx >> 2] = imageDecoder[mnIdx]\n                    imageDecoder[mnIdx] = wireStatesN;\n                } else if (left) {\n                    incomingWires[incomingWiresN] = mnIdx;\n                    incomingWiresN++;\n                    incomingWireGroupsLen[wireStatesN]++;\n                } else if (right) {\n                    incomingWires[incomingWiresN] = mnIdx;\n                    incomingWiresN++;\n                    incomingWireGroupsLen[wireStatesN]++;\n                } else {\n                    wireActive |= data[(m + 1) + (n + 1) * (width + 2)] >> 1;\n                    imageDecoder[mnIdx] = wireStatesN;\n                }\n            } else if (left === right) {\n                // Impossibru!\n                throw 4;\n            } else {\n                wireActive |= data[(m + 1) + (n + 1) * (width + 2)] >> 1;\n                imageDecoder[mnIdx] = wireStatesN\n                if (left) {\n                    [dm, dn] = [-dn, +dm];\n                } else {\n                    [dm, dn] = [+dn, -dm];\n                }\n            }\n        }\n    }\n\n    for (let j = 0; j < height; j++) {\n        for (let i = 0; i < width; i++) {\n            if (!data[(i + 1) + (j + 1) * (width + 2)]) {\n                continue;\n            }\n            if (imageDecoder[i + j * width] != 0) {\n                continue;\n            }\n\n            traverseLoopsFrom(data, width, i, j);\n        }\n\n        postMessage([\"frame\", j]);\n    }\n\n    for (let i = 0; i < incomingWiresN; i++) {\n        incomingWires[i] = imageDecoder[incomingWires[i]];\n    }\n\n    let groupStart = 0;\n    for (let i = 0; i < wireStatesN; i++) {\n        let groupLength = incomingWireGroupsLen[i];\n\n        let incoming = incomingWires.slice(groupStart, groupStart + groupLength);\n        incoming.sort();\n        incomingWires.set(incoming, groupStart);\n\n        groupStart += groupLength;\n    }\n\n    // Round up to multiple of width so we can have less-skew textures.\n    const packedWireStatesN = ((wireStatesN >> 3) + 1023) & ~1023;\n    wireStatesN = (wireStatesN + 1023) & ~1023;\n    incomingWiresN = (incomingWiresN + 1023) & ~1023;\n\n    let packedWireStates = new Uint8Array(packedWireStatesN)\n    for (let i = 0; i < wireStatesN / 8; i++) {\n        for (let j = 0; j < 8; j++) {\n            packedWireStates[i] |= wireStates[i * 8 + j] << j;\n        }\n    }\n\n    // Return\n    wireStates = packedWireStates;\n    incomingWires = incomingWires.slice(0, incomingWiresN);\n    incomingWireGroupsOff = incomingWireGroupsOff.slice(0, wireStatesN >> 3);\n    incomingWireGroupsLen = incomingWireGroupsLen.slice(0, wireStatesN);\n\n    postMessage(\n        [\"finish\", {wireStates, incomingWires, incomingWireGroupsOff, incomingWireGroupsLen, imageDecoder, imageDecoderExtra}],\n        [wireStates.buffer, incomingWires.buffer, incomingWireGroupsOff.buffer, incomingWireGroupsLen.buffer, imageDecoder.buffer, imageDecoderExtra.buffer]\n    );\n}\n"],"names":[],"mappings":"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"}